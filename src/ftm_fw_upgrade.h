/*************************************************************************************************/
// File: ftm_fw_upgrade.h
// Description: Firmware upgrade through ST25DV Fast Transfer Mode functions.
// Created on: 09 jun. 2020
// Last modified date: 09 jun. 2020
// Version: 1.0.0
/*************************************************************************************************/

/* Include Guard */
#ifndef NFCST25DV_FTM_FW_UPGRADE_H_
#define NFCST25DV_FTM_FW_UPGRADE_H_

/* C++ compiler compatibility */
#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************/

/* Libraries */

#include <stdbool.h>

#include "nfcst25dv.h"

/*************************************************************************************************/

/* Constants Defines */

#define MB_FCTCODE            0
#define MB_CMDRESP            1
#define MB_ERROR              2
#define MB_CHAINING           3
#define MB_LENGTH             4
#define MB_DATA               5
#define MB_CH_FULLLENGTH      7
#define MB_CH_TOTALCHUNK      9
#define MB_CH_NBCHUNK         11
#define MB_CH_LENGTH          12
#define MB_CH_DATA            13

#define MB_MAXFUNCTION        0xFF
#define MB_R2HSIMPLETRANSFER  0x01
#define MB_R2HCHAINEDTRANFER  0x02
#define MB_R2HDATATRANSFER    0x03
#define MB_R2HFIRMWAREUPDATE  0x04
#define MB_H2RSIMPLETRANSFER  0x05
#define MB_H2RCHAINEDTRANSFER 0x06
#define MB_H2RIMAGEUPLOAD     0x07
#define MB_R2HPRESENTPASSWORD 0x08
#define MB_R2HIMAGEDOWNLOAD   0x09
#define MB_H2RDATATRANSFER    0x0A
#define MB_R2HSTOPWATCH       0x0B

#define MB_CANCELCOMMAND      0xF0
#define MB_RESETCOMMUNICATION 0xF1

#define MB_COMMAND            0
#define MB_RESPONSE           1
#define MB_ACKNOWLEDGE        2

#define MB_NOERROR            0
#define MB_DEFAULTERROR       1
#define MB_UNKNOWNFUNCTION    2
#define MB_BADREQUEST         3
#define MB_LENGTHERROR        4
#define MB_CHUNKERROR         5
#define MB_PROTOCOLERROR      6

#define MAXMAILBOXLENGTH      255

/* Payload=236 + Header=13 + flag=1 + crc16=2 = 252 (must be < 256) */
#define ALIGNED_FRAMESIZE     236

/*************************************************************************************************/

/* Data Types */

/**
 * @brief  Mailbox global header information structure definition
 */
typedef struct
{
    uint16_t framesize;     /**< Size of current frame to transfer */
    uint8_t fctcode;        /**< Function code used to define the action of the requester */
    uint8_t cmdresp;        /**< Defines current frame command, answer, acknowledge */
    uint8_t error;          /**< Error code if an error is detected */
    uint8_t chaining;       /**< Defines if the frame is a simple frame (0) or chained frame (1) */
    uint8_t framelength;    /**< Informs the data length of the current frame */
    uint16_t totalchunk;    /**< Informs on the total number of chunk that will need to perform the transfer */
    uint16_t chunknb;       /**< Informs for a specific frame the current chunk number of that frame */
    uint32_t fulllength;    /**< Informs on the total length of data to transfer */
    uint8_t *pData;         /**< Pointer to buffer data to transfer */
} MB_HEADER_T;

typedef struct
{
    uint8_t WriteInEEPROM;  /**< EEPROM has been written by the RF */
    uint8_t RfActivity;     /**< The tag is processing on RF side */
    uint8_t FieldOn;        /**< RF field becomes active */
    uint8_t FieldOff;       /**< RF field becomes inactive */
    uint8_t MsgInMailbox;   /**< Fast Transfer Mode: message from the RF received */
    uint8_t MailboxMsgRead; /**< Fast Transfer Mode: message read by the RF */
    uint8_t RfInterrupt;    /**< Interrupt generated by a dedicated RF command  */
    uint8_t Rfuser;         /**< GPO level controlled through the RF */
} IT_GPO_STATUS;

enum { MB_NOTCHAINED = 0, MB_CHAINED };

/*************************************************************************************************/

/* Functions */

bool ftm_setup(NFCST25DV* nfc, const uint32_t passwd_msb, const uint32_t passwd_lsb);

bool ftm_on(void);
bool ftm_off(void);
bool ftm_clear_mb(void);
int8_t ftm_get_status(void);

bool gpo_event_fire(IT_GPO_STATUS* const gpo);
void shows_gpo_event(const IT_GPO_STATUS gpo);

int32_t ftm_write_msg(const uint8_t* const ptr_data, const uint16_t num_bytes);
int32_t ftm_read_msg(uint8_t* const ptr_data, uint8_t* const num_bytes);
int32_t ftm_read_data(uint8_t* const ptr_data, const uint8_t offset, const uint16_t num_bytes);

bool ftm_send_msg(MB_HEADER_T* const mb_header, const uint8_t num_retries);
void msg_decode_header(const uint8_t* const ptr_data, MB_HEADER_T* const mb_header);
void msg_add_header(uint8_t* const ptr_data, const MB_HEADER_T* const mb_header);

bool check_crc(uint32_t* data, const uint32_t data_length);

/*************************************************************************************************/

#ifdef __cplusplus
}
#endif

#endif
